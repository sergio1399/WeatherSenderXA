Связка приложений, реализующих функционал погодного брокера. Подсистема WeatherSender(далее - Отправитель) реализует получение сведений о погоде в заданном городе с погодного сервиса yahoo и пересылает эти данные в очередь сообщений. Подсистема WeatherReceiver(далее - Получатель) настроена на прослушивание очереди сообщений, и сохраненяет полученные данные в БД. Также в Получателе реализован функционал поиска данных о погоде для конкретного города. 

Система использует технологию Spring MVC, в качестве очереди сообщений JMS используется ActiveMQ. В качестве СУБД используется PostgreSQL версии 9.5 и выше.
Application Server - TomCat(версия 8.5.30).
Java 8 - JDK 1.8.
В качестве средства разработки использовалась IDE IntelliJ Idea Ultimate 2018.1.
Для отсутствия адресных конфликтов необходимо запускать Отправитель и Получатель на двух разных конфигурациях TomCat, с разными значениями портов, либо использовать другой вариант решения конфликтов. 
Для реализации принципа ORM в проекте используется Hibernate(версия 5.3.0). Приложение работает через распределенные транзакции, используя менеджер распределенных транзакций Atomikos(версия 4.0.6). В конфигурационном классе необходимо определить бины источника данных, менеджера транзакций и фабрики соединений(реализации Atomikos). Для работы БД необходимо выполнить приложенный скрипт shema_weather.sql, предварительно создав пустую БД weather и пользователя sa sa(при отсутствии).
В качестве сборщика для обеих подсистем выступает Maven, зависимости прописываются в pom.xml.

Структура проекта. Конфигурационные классы для Spring находятся в пакете config. Инициализация контекста приложения здесь же в классе MyWebAppInitializer.
В пакете components находятся все возможные аннотированные компоненты бины.
Для конвертации объектов java в json используется библиотека Jackson(версия 2.9.5).
В Отправителе используется jsp-страница ввода названия города. Обработка клиентского запроса осуществляется контроллером ForecastController, который совершает запрос к погодному сервису yahoo и получает данные в формате json. Далее из требуемых полей происходит создание объекта вида, хрянещого данные города и прогноза для него. Далее этот объект-вью отправляется в очередь. Используется для этого объект JMSTemplate, сконфигурированный для работы в распределенной транзакции. Распределенная транзакция инициируется средствами Spring и Atomikos в начале метода путем аннотации @Transactional. В случае успешного выполнения контроллер возвращает имя jsp-страницы отображения погодных данных в качестве вью, и объект модели, в который записываются эти данные. В случае исключительной ситуации контроллер возвращает страницу ошибки error.jsp.
В Получателе конфигурируется класс слушателя JMS - очереди. При появлении сообщения, оно конвертируется в java-объект прогноза и сохраняется в БД(В случае отсутствия в базе города он также добавляется). Параллельно при загрузке приложения отображается jsp-страница поиска прогноза по городу в БД. Rest Controller обрабатывает поиск в базе и возвращает объект вью в качестве Response в формате json. Для перехвата исключений при работе контроллера реализован класс с аннотацией RestControllerAdvice содержащий метод аннотированный @ExceptionHandler, который возвращает сообщение об ошибке в формате json.